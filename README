Project:   <clotho>
Author: Patrick Putnam

DESCRIPTION
    
    <clotho> is a forward-time population genetics simulation C/C++ template library.
The goal of the project is to provide flexible objects which can be used to 
form the basis of a population genetic simulator.  The project should be able to
take full advantage of the hardware resources available at the time of execution.

    Clotho was one of the Three Fates in Greek mythology.  She spun the thread
of human life, and was responsible for deciding when a person was born, and 
therefore their lives.

OVERVIEW
    - Dependencies
    - Compilation
    - Useful Commands


DEPENDENCIES
    - CMake 2.8 (or higher)
    - Boost 1.54.0 (or higher)
    - TCMalloc & Profiler  [optional] (https://code.google.com/p/gperftools/)
    - GSL [optional]
    - CUDA GPGPU with compute capability 3.0 or greater [optional]
    - CUDA Toolkit 7.0 or greater [optional]

SUPPORTED SYSTEMS:
- *NIX
- Mac OSX has not been fully tested.  Early tests suggest that librt and libpthread are not available/used on Mac OSX. See 'Useful CMake Configuration Options' to see how to turn linking against these libraries off.
- CUDA GPUs with compute capability 3.0 or greater.  Example CUDA code utilizes __shfl* instructions which are only available after compute capability 3.0.
- CUDA Toolkit 7.0 is used because it allows for -std=c++11 to be used in host code.


COMPILATION
    Execute the following commands in the main project directory:
        mkdir build
        cd build
        cmake ..
        make

    - The example programs will be in the bin sub-directory.

    - The 'build' directory is ment to keep the compiled object files from being created in the main
    project directory (ie. to keep the project directories clean).

    - Executing 'make doc' will create the Doxygen files for the project in the 'docs' sub-directory.
        * The Doxygen files are work in progress


Useful CMake Configuration Options:
  <Variable>            [Default state]
- WITH_CUDA_EXAMPLES    [=OFF]
- WITH_GSL              [=OFF]
- WITH_TC_MALLOC        [=ON]
- WITH_PROFILER         [=ON]
- WITH_RT               [=OFF]
- WITH_PTHREAD          [=OFF]

Configuration Variable: WITH_CUDA_EXAMPLES
Description: Turns on/off whether the CUDA examples are compiled or not
              TC_MALLOC and GPerfProfiler will occassionally result in a seg fault after the execution of CUDA code. (Reason unknown)
Example Command: mkdir -p build/cuda; cd build/cuda; cmake -DWITH_CUDA_EXAMPLES=ON -DWITH_TC_MALLOC=OFF -DWITH_PROFILER=OFF ../..; make; cd ../..

Configuration Variable: WITH_GSL [=OFF by default]
Description: Turns on/off whether binaries should be linked with GSL libraries.  Intended for future examples.
Example Command: mkdir -p build/gsl; cd build/gsl; cmake -DWITH_GSL=ON ../..; make; cd ../..

Configuration Variable: WITH_TC_MALLOC and WITH_PROFILER [=ON by default]
Description: Turns on/off linking against tcmalloc and profiler from Gperftools.  Recommend using these useful tools for 
    generally efficient memory allocation and performance profiling.
Example Command: mkdir -p build/no_gperf; cd build/no_gperf; cmake -DWITH_TC_MALLOC=OFF -DWITH_PROFILER=OFF ../..; make; cd ../..

Configuration Variable: WITH_RT
Description: Turns on/off POSIX Realtime extension library. Mac OSX does not seem to provide this library.
Example Command: mkdir -p build/no_rt; cd build/no_rt; cmake -DWITH_RT=ON ../..; make; cd ../..
